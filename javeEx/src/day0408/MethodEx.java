package day0408;
// 1
public class MethodEx {
	// 메서드 
	// 메서드 형태 - 선언부(소괄호까지) 구현부(중괄호부분)
	// 리턴 타입 메서드명(매개변수,...){ 구현 코드 }
	void method() {
		System.out.println("Hello Method");
	}
}
/*
		메서드(Method)
			- 객체의 동작, 기능을 정의 한 블럭{}
			- 외부로부터 매개값을 받을 수도 있고, 실행 결과를 반환(return)할 수도 있다.
			- 메서드는 호출한 곳으로 되돌아옴(return)
				호출 -> 실행 -> 결과 -> 리턴

		메서드 형태
			- 선언부와 구현부로 나뉘어 있다.
			- 선언부 : 리턴타입 메서드이름(매개변수,...)
			- 구현부 : { 실행코드 }
		
		리턴타입 메서드명(매개변수, ... ){
			// 구현부(실행코드)
		}
		
			리턴타입      : 실행 후 되돌아오는 반환값의 자료형
			매서드이름()	: 호출 할 때 사용되는 이름
			매개변수		: 외부로부터 전달받는 값들
			{}			: 실행 블럭, 구현 코드가 들어간다.
			
		메서드 명명 규칙
			- 변수명 명명규칙과 같다.
			- 기능이 유추 가능한 이름으로 구성
			
		return문
			- 리턴 값이 있는 경우 
			리턴타입을 메서드 이름 앞에 붙임
			반드시 return문을 사용한다.
			return 문 실행 되면 메서드는 종료 됨

			- 리턴 값이 없는 경우
			void 를 메서드 이름 앞에 붙임
			return문은 선택적으로 사용한다
			return문 사용시 메서드가 종료됨
			
		메서드 오버로딩 
			- 이름이 같은 메서드 여러개 정의
			- 매개변수의 타입, 순서, 개수가 달라야함
			- 리턴타입은 오버로딩 판별 기준이 아님!
			- 이름은 상관없음
		
		정적 멤버 static 
		객체 생성없이 사용가능
		class A {
		static int y = 20;
		}
		A.y 클래스명.정적멤버;
		정적멤버 = 공용적인 데이터
		인스턴스멤버 = 객체마다 가지고 있어야할 데이터
*/